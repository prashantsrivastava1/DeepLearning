import tensorflow as tf
import numpy as np

print("Using TensorFlow version:",tf.__version__)

"""A vector is a 1-dimensional tensor"""

# Vector in TensorFlow
vector_tf = tf.constant([0,1,2,3,4])

# Vector in Numpy
vector_np = np.array([0,1,2,3,4])

print("Shapes:",vector_tf.shape,vector_np.shape)

"""A matrix is a 2-dimensional tensor"""

# Matrix in TensorFlow
matrix_tf = tf.constant([[0,1],[2,3],[4,5]])

# Matrix in Numpy
matrix_np = np.array([[0,1],[2,3],[4,5]])

print("Shapes:",matrix_tf.shape,matrix_np.shape)

"""3-dimensional tensor"""

# 3-d tensor in TensorFlow
t3_tf = tf.constant([[[0,1],[2,3],[4,5]]]*5)

# 3-d matrix in numpy
t3_np = np.array([[[0,1],[2,3],[4,5]]]*5)

print("Shapes:",t3_tf.shape,t3_np.shape)

print(t3_tf)

"""Two ways of tensors: tf_constant & tf.Variable"""
const_tensor = tf.constant([[1,2,3],[4,5,6]])
var_tensor = tf.Variable([[1,2,3],[4,5,6]])

"""Declaring tensors with specific data types"""
int32_tensor = tf.Variable([[1,2,3],[4,5,6]], dtype=tf.int32)
float32_tensor = tf.Variable([[1,2,3],[4,5,6]], dtype=tf.float32)
bool_tensor = tf.Variable([True,False,False], dtype=tf.bool)

print("Int32 tensor: ", int32_tensor)
print("Float32 tensor: ", float32_tensor)
print("Boolean tensor: ", bool_tensor)

print(int32_tensor.numpy())

# initialize the nd array in Numpy and then use that to initialize the tensor
arr = np.random.randn(2,2,2,2)
print(arr.shape)
print(arr)

arr_tf = tf.constant(arr)

print(arr_tf)

# using random number generating functions from TensorFlow
arr_tf = tf.random.normal((2,2,2,2),mean=1,stddev=1,name="my_tensor")
print(arr_tf)

# Common mathematical operations on tensors
x = tf.Variable([list(range(5))]*5)
y = tf.Variable([list(range(5,10))]*5)

print("x: ",x)
print("y: ",y)

# element wise operations
z = x+y
w=x*y
v=y/x
s=y-x

print("z: ",z)
print("w: ",w)
print("v: ",v)
print("s: ",s)


#Linear algebra on tensors

## Matrix multiplication
x=tf.Variable([[0,1,2,3,4],[5,6,7,8,9],[10,11,12,13,14],[15,16,17,18,19],[20,21,22,23,24]])
y=tf.Variable([[0,1,2],[3,4,5],[6,7,8],[9,10,11],[12,13,14]])

z=tf.linalg.matmul(x,y)
print("z: ",z)

try:
    x=tf.Variable([[2,3],[2,2]])
    x_inv=tf.linalg.inv(x)
    print("Inverse of x:: ", x_inv)
except Exception as e:
    print("Exception raised while performing tensor inverse:\n",str(e))
    

# Solve the following system of linear equations using tensorflow

## x+y+z+w=13
## 2x+3y-w=-1
## -3x+4y+z+2w=10
## x+2y-z+w=1
## Ans: x=2,y=0,z=6,w=5

coeff = tf.Variable([[1,1,1,1],[2,3,0,-1],[-3,4,1,2],[1,2,-1,1]], dtype=tf.float32)
print("Coeff: ",coeff)

y=tf.Variable([[13],[-1],[10],[1]], dtype=tf.float32)
print("y: ",y)

# x=inverse of coeff * y
inv_coeff = tf.linalg.inv(coeff)
print("Inverse of coeff: ",inv_coeff)

x_sol = tf.matmul(inv_coeff, y)
print("Solution: ",x_sol)